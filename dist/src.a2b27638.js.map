{"version":3,"sources":["src/index.js","C:/Users/rajib/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["_simonSaysSound","_interopRequireDefault","require","_simonSaysSound2","_simonSaysSound3","_simonSaysSound4","obj","__esModule","default","startButton","document","querySelector","statusSpan","heading","padContainer","computerSequence","playerSequence","maxRoundCount","roundCount","colors","pads","color","selector","sound","Audio","sound1","sound2","sound3","sound4","addEventListener","padHandler","startButtonHandler","setLevel","classList","add","remove","playComputerTurn","event","target","dataset","console","log","pad","find","play","checkPress","level","arguments","length","undefined","levelSequenceLengths","hasOwnProperty","getRandomItem","collection","randomIndex","Math","floor","random","setText","element","text","innerHTML","activatePad","setTimeout","activatePads","sequence","forEach","index","concat","randomColor","push","playHumanTurn","remainingPresses","resetGame","checkRound","alert","window","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","JSON","parse","type","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","body","appendChild","getElementById","createElement","stackTrace","innerText","getParents","modules","parents","k","d","dep","Array","isArray","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["/**\r\n * DOM SELECTORS\r\n */\r\n\r\nconst startButton = document.querySelector(\".js-start-button\");\r\n// TODO: Add the missing query selectors:\r\nconst statusSpan = document.querySelector(\".js-status\"); // Use querySelector() to get the status element\r\nconst heading = document.querySelector(\".js-heading\"); // Use querySelector() to get the heading element\r\nconst padContainer = document.querySelector(\".js-pad-container\"); // Use querySelector() to get the heading element\r\n\r\n/**\r\n * VARIABLES\r\n */\r\nimport sound1 from \"../assets/simon-says-sound-1.mp3\";\r\nimport sound2 from \"../assets/simon-says-sound-2.mp3\";\r\nimport sound3 from \"../assets/simon-says-sound-3.mp3\";\r\nimport sound4 from \"../assets/simon-says-sound-4.mp3\";\r\n\r\nlet computerSequence = []; // track the computer-generated sequence of pad presses\r\nlet playerSequence = []; // track the player-generated sequence of pad presses\r\nlet maxRoundCount = 0; // the max number of rounds, varies with the chosen level\r\nlet roundCount = 0; // track the number of rounds that have been played so far\r\nconst colors = [\"red\", \"green\", \"blue\", \"yellow\"];\r\n\r\n/**\r\n *\r\n * The `pads` array contains an array of pad objects.\r\n *\r\n * Each pad object contains the data related to a pad: `color`, `sound`, and `selector`.\r\n * - The `color` property is set to the color of the pad (e.g., \"red\", \"blue\").\r\n * - The `selector` property is set to the DOM selector for the pad.\r\n * - The `sound` property is set to an audio file using the Audio() constructor.\r\n *\r\n * Audio file for the green pad: \"../assets/simon-says-sound-2.mp3\"\r\n * Audio file for the blue pad: \"../assets/simon-says-sound-3.mp3\"\r\n * Audio file for the yellow pad: \"../assets/simon-says-sound-4.mp3\"\r\n *\r\n */\r\n\r\nconst pads = [\r\n  {\r\n    color: \"red\",\r\n    selector: document.querySelector(\".js-pad-red\"),\r\n    sound: new Audio(sound1),\r\n  },\r\n  // TODO: Add the objects for the green, blue, and yellow pads. Use object for the red pad above as an example.\r\n  {\r\n    color: \"green\",\r\n    selector: document.querySelector(\".js-pad-green\"),\r\n    sound: new Audio(sound2),\r\n  },\r\n  {\r\n    color: \"blue\",\r\n    selector: document.querySelector(\".js-pad-blue\"),\r\n    sound: new Audio(sound3),\r\n  },\r\n  {\r\n    color: \"yellow\",\r\n    selector: document.querySelector(\".js-pad-yellow\"),\r\n    sound: new Audio(sound4),\r\n  },\r\n];\r\n\r\n/**\r\n * EVENT LISTENERS\r\n */\r\n\r\npadContainer.addEventListener(\"click\", padHandler);\r\n// TODO: Add an event listener `startButtonHandler()` to startButton.\r\nstartButton.addEventListener(\"click\", startButtonHandler);\r\n\r\n/**\r\n * EVENT HANDLERS\r\n */\r\n\r\n/**\r\n * Called when the start button is clicked.\r\n *\r\n * 1. Call setLevel() to set the level of the game\r\n *\r\n * 2. Increment the roundCount from 0 to 1\r\n *\r\n * 3. Hide the start button by adding the `.hidden` class to the start button\r\n *\r\n * 4. Unhide the status element, which displays the status messages, by removing the `.hidden` class\r\n *\r\n * 5. Call `playComputerTurn()` to start the game with the computer going first.\r\n *\r\n */\r\nfunction startButtonHandler() {\r\n  // TODO: Write your code here.\r\n  setLevel();\r\n  roundCount = 1;\r\n\r\n  startButton.classList.add(\"hidden\");\r\n  statusSpan.classList.remove(\"hidden\");\r\n  playComputerTurn();\r\n\r\n  return { startButton, statusSpan };\r\n}\r\n\r\n/**\r\n * Called when one of the pads is clicked.\r\n *\r\n * 1. `const { color } = event.target.dataset;` extracts the value of `data-color`\r\n * attribute on the element that was clicked and stores it in the `color` variable\r\n *\r\n * 2. `if (!color) return;` exits the function if the `color` variable is falsy\r\n *\r\n * 3. Use the `.find()` method to retrieve the pad from the `pads` array and store it\r\n * in a variable called `pad`\r\n *\r\n * 4. Play the sound for the pad by calling `pad.sound.play()`\r\n *\r\n * 5. Call `checkPress(color)` to verify the player's selection\r\n *\r\n * 6. Return the `color` variable as the output\r\n */\r\nfunction padHandler(event) {\r\n  const { color } = event.target.dataset;\r\n  console.log({ color });\r\n  if (!color) return;\r\n  const pad = pads.find((pad) => pad.color === color);\r\n  pad.sound.play();\r\n  checkPress(color);\r\n  // TODO: Write your code here.\r\n  return color;\r\n}\r\n\r\n/**\r\n * HELPER FUNCTIONS\r\n */\r\n\r\n/**\r\n * Sets the level of the game given a `level` parameter.\r\n * Returns the length of the sequence for a valid `level` parameter (1 - 4) or an error message otherwise.\r\n *\r\n * Each skill level will require the player to complete a different number of rounds, as follows:\r\n * Skill level 1: 8 rounds\r\n * Skill level 2: 14 rounds\r\n * Skill level 3: 20 rounds\r\n * Skill level 4: 31 rounds\r\n *\r\n *\r\n * Example:\r\n * setLevel() //> returns 8\r\n * setLevel(1) //> returns 8\r\n * setLevel(2) //> returns 14\r\n * setLevel(3) //> returns 20\r\n * setLevel(4) //> returns 31\r\n * setLevel(5) //> returns \"Please enter level 1, 2, 3, or 4\";\r\n * setLevel(8) //> returns \"Please enter level 1, 2, 3, or 4\";\r\n *\r\n */\r\nfunction setLevel(level = 1) {\r\n  // TODO: Write your code here.\r\n  const levelSequenceLengths = {\r\n    1: 8,\r\n    2: 14,\r\n    3: 20,\r\n    4: 31,\r\n  };\r\n\r\n  // Check if the level parameter is valid\r\n  if (!levelSequenceLengths.hasOwnProperty(level)) {\r\n    return \"Please enter level 1, 2, 3, or 4\";\r\n  }\r\n  maxRoundCount = levelSequenceLengths[level];\r\n  // Return the length of the sequence for the selected level\r\n  return levelSequenceLengths[level];\r\n}\r\n\r\n/**\r\n * Returns a randomly selected item from a given array.\r\n *\r\n * 1. `Math.random()` returns a floating-point, pseudo-random number in the range 0 to less than 1\r\n *\r\n * 2. Multiplying the value from `Math.random()` with the length of the array ensures that the range\r\n * of the random number is less than the length of the array. So if the length of the array is 4,\r\n * the random number returned will be between 0 and 4 (exclusive)\r\n *\r\n * 3. Math.floor() rounds the numbers down to the largest integer less than or equal the given value\r\n *\r\n * Example:\r\n * getRandomItem([1, 2, 3, 4]) //> returns 2\r\n * getRandomItem([1, 2, 3, 4]) //> returns 1\r\n */\r\nfunction getRandomItem(collection) {\r\n  if (collection.length === 0) return null;\r\n  const randomIndex = Math.floor(Math.random() * collection.length);\r\n  return collection[randomIndex];\r\n}\r\n\r\n/**\r\n * Sets the status text of a given HTML element with a given a message\r\n */\r\nfunction setText(element, text) {\r\n  // TODO: Write your code here.\r\n  element.innerHTML = text;\r\n  return element;\r\n}\r\n\r\n/**\r\n * Activates a pad of a given color by playing its sound and light\r\n *\r\n * 1. Use the `.find()` method to retrieve the pad from the `pads` array and store it in\r\n * a variable called `pad`\r\n *\r\n * 2. Add the `\"activated\"` class to the selected pad\r\n *\r\n * 3. Play the sound associated with the pad\r\n *\r\n * 4. After 500ms, remove the `\"activated\"` class from the pad\r\n */\r\n\r\nfunction activatePad(color) {\r\n  // TODO: Write your code here.\r\n  const pad = pads.find((pad) => pad.color === color);\r\n  console.log({ pad });\r\n  pad.selector.classList.add(\"activated\");\r\n\r\n  pad.sound.play();\r\n\r\n  setTimeout(() => {\r\n    pad.selector.classList.remove(\"activated\");\r\n  }, 500);\r\n}\r\n\r\n/**\r\n * Activates a sequence of colors passed as an array to the function\r\n *\r\n * 1. Iterate over the `sequence` array using `.forEach()`\r\n *\r\n * 2. For each element in `sequence`, use `setTimeout()` to call `activatePad()`, adding\r\n * a delay (in milliseconds) between each pad press. Without it, the pads in the sequence\r\n * will be activated all at once\r\n *\r\n * 3. The delay between each pad press, passed as a second argument to `setTimeout()`, needs\r\n * to change on each iteration. The first button in the sequence is activated after 600ms,\r\n * the next one after 1200ms (600ms after the first), the third one after 1800ms, and so on.\r\n */\r\n\r\nfunction activatePads(sequence) {\r\n  // TODO: Write your code here.\r\n  sequence.forEach((color, index) => {\r\n    setTimeout(() => {\r\n      activatePad(color);\r\n    }, 600 * index);\r\n  });\r\n}\r\n\r\n/**\r\n * Allows the computer to play its turn.\r\n *\r\n * 1. Add the `\"unclickable\"` class to `padContainer` to prevent the user from pressing\r\n * any of the pads\r\n *\r\n * 2. The status should display a message that says \"The computer's turn...\"\r\n *\r\n * 3. The heading should display a message that lets the player know how many rounds are left\r\n * (e.g., \"`Round ${roundCount} of ${maxRoundCount}`\")\r\n *\r\n * 4. Push a randomly selected color into the `computerSequence` array\r\n *\r\n * 5. Call `activatePads(computerSequence)` to light up each pad according to order defined in\r\n * `computerSequence`\r\n *\r\n * 6. The playHumanTurn() function needs to be called after the computer’s turn is over, so\r\n * we need to add a delay and calculate when the computer will be done with the sequence of\r\n * pad presses. The `setTimeout()` function executes `playHumanTurn(roundCount)` one second\r\n * after the last pad in the sequence is activated. The total duration of the sequence corresponds\r\n * to the current round (roundCount) multiplied by 600ms which is the duration for each pad in the\r\n * sequence.\r\n */\r\nfunction playComputerTurn() {\r\n  // TODO: Write your code here.\r\n  padContainer.classList.add(\"unclickable\");\r\n  setText(statusSpan, \"The computer's turn...\");\r\n  setText(heading, `Round ${roundCount} of ${maxRoundCount}`);\r\n  const randomColor = getRandomItem(colors);\r\n  computerSequence.push(randomColor);\r\n  activatePads(computerSequence);\r\n\r\n  setTimeout(() => playHumanTurn(roundCount), roundCount * 600 + 1000); // 5\r\n}\r\n\r\n/**\r\n * Allows the player to play their turn.\r\n *\r\n * 1. Remove the \"unclickable\" class from the pad container so that each pad is clickable again\r\n *\r\n * 2. Display a status message showing the player how many presses are left in the round\r\n */\r\nfunction playHumanTurn() {\r\n  // TODO: Write your code here.\r\n  padContainer.classList.remove(\"unclickable\");\r\n  setText(statusSpan, `Your turn (${roundCount} presses left)`);\r\n}\r\n\r\n/**\r\n * Checks the player's selection every time the player presses on a pad during\r\n * the player's turn\r\n *\r\n * 1. Add the `color` variable to the end of the `playerSequence` array\r\n *\r\n * 2. Store the index of the `color` variable in a variable called `index`\r\n *\r\n * 3. Calculate how many presses are left in the round using\r\n * `computerSequence.length - playerSequence.length` and store the result in\r\n * a variable called `remainingPresses`\r\n *\r\n * 4. Set the status to let the player know how many presses are left in the round\r\n *\r\n * 5. Check whether the elements at the `index` position in `computerSequence`\r\n * and `playerSequence` match. If they don't match, it means the player made\r\n * a wrong turn, so call `resetGame()` with a failure message and exit the function\r\n *\r\n * 6. If there are no presses left (i.e., `remainingPresses === 0`), it means the round\r\n * is over, so call `checkRound()` instead to check the results of the round\r\n *\r\n */\r\nfunction checkPress(color) {\r\n  // TODO: Write your code here.\r\n  playerSequence.push(color);\r\n\r\n  const index = playerSequence.length - 1;\r\n  const remainingPresses = computerSequence.length - playerSequence.length;\r\n\r\n  setText(statusSpan, `Your turn (${remainingPresses} presses left)`);\r\n\r\n  if (computerSequence[index] !== playerSequence[index]) {\r\n    resetGame(\"Wrong move! Game over.\");\r\n    return;\r\n  }\r\n\r\n  if (remainingPresses === 0) {\r\n    checkRound();\r\n  }\r\n}\r\n\r\n/**\r\n * Checks each round to see if the player has completed all the rounds of the game * or advance to the next round if the game has not finished.\r\n *\r\n * 1. If the length of the `playerSequence` array matches `maxRoundCount`, it means that\r\n * the player has completed all the rounds so call `resetGame()` with a success message\r\n *\r\n * 2. Else, the `roundCount` variable is incremented by 1 and the `playerSequence` array\r\n * is reset to an empty array.\r\n * - And the status text is updated to let the player know to keep playing (e.g., \"Nice! Keep going!\")\r\n * - And `playComputerTurn()` is called after 1000 ms (using setTimeout()). The delay\r\n * is to allow the user to see the success message. Otherwise, it will not appear at\r\n * all because it will get overwritten.\r\n *\r\n */\r\n\r\nfunction checkRound() {\r\n  // TODO: Write your code here.\r\n  if (playerSequence.length === maxRoundCount) {\r\n    resetGame(\"Congratulations! You completed all rounds.\");\r\n  } else {\r\n    roundCount++;\r\n    playerSequence = [];\r\n    setText(statusSpan, \"Nice! Keep going!\");\r\n    setTimeout(() => playComputerTurn(), 1000);\r\n  }\r\n}\r\n\r\n/**\r\n * Resets the game. Called when either the player makes a mistake or wins the game.\r\n *\r\n * 1. Reset `computerSequence` to an empty array\r\n *\r\n * 2. Reset `playerSequence` to an empty array\r\n *\r\n * 3. Reset `roundCount` to an empty array\r\n */\r\nfunction resetGame(text) {\r\n  // TODO: Write your code here.\r\n  computerSequence = [];\r\n  playerSequence = [];\r\n  roundCount = 0;\r\n  // Uncomment the code below:\r\n  alert(text);\r\n  setText(heading, \"Simon Says\");\r\n  startButton.classList.remove(\"hidden\");\r\n  statusSpan.classList.add(\"hidden\");\r\n  padContainer.classList.add(\"unclickable\");\r\n}\r\n\r\n/**\r\n * Please do not modify the code below.\r\n * Used for testing purposes.\r\n *\r\n */\r\nwindow.statusSpan = statusSpan;\r\nwindow.heading = heading;\r\nwindow.padContainer = padContainer;\r\nwindow.pads = pads;\r\nwindow.computerSequence = computerSequence;\r\nwindow.playerSequence = playerSequence;\r\nwindow.maxRoundCount = maxRoundCount;\r\nwindow.roundCount = roundCount;\r\nwindow.startButtonHandler = startButtonHandler;\r\nwindow.padHandler = padHandler;\r\nwindow.setLevel = setLevel;\r\nwindow.getRandomItem = getRandomItem;\r\nwindow.setText = setText;\r\nwindow.activatePad = activatePad;\r\nwindow.activatePads = activatePads;\r\nwindow.playComputerTurn = playComputerTurn;\r\nwindow.playHumanTurn = playHumanTurn;\r\nwindow.checkPress = checkPress;\r\nwindow.checkRound = checkRound;\r\nwindow.resetGame = resetGame;\r\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}